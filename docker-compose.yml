services:
  users-postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users-service
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'"]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5433:5432"
    volumes:
      - users-data:/var/lib/postgresql/data
    networks:
      - casino

  redis-master:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"
    expose:
      - "6379"
    networks:
      - casino

  redis-slave-1:
    image: redis:latest
    depends_on:
      redis-master:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - REDIS_REPLICATION_MODE=slave
      - REDIS_MASTER_HOST=redis-master
    ports:
      - "6378:6379"
    expose:
      - "6379"
    command: ["redis-server", "--slaveof", "redis-master", "6379"]
    networks:
      - casino


  users-init:
    build: ./users
    command: ["npm", "run", "migration:run"]
    environment:
      DB_HOST: users-postgres
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: users-service
    depends_on:
      users-postgres:
        condition: service_healthy
    networks:
      - casino

  users:
    build: ./users
    expose:
      - "50051"
      - "3000"
    depends_on:
      users-init:
        condition: service_completed_successfully
      users-postgres:
        condition: service_healthy
      redis-master:
        condition: service_healthy
      redis-slave-1:
        condition: service_healthy
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    deploy:
      replicas: 3
    environment:
      PORT: 3000
      GRPC_PORT: 50051
      NODE_ENV: development
      DB_HOST: users-postgres
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: users-service
      REDIS_HOST: redis-master
      REDIS_PORT: 6379
      REDIS_SLAVE_HOST: redis-slave-1 
      REDIS_SLAVE_PORT: 6379 
      ACCESS_TOKEN_SECRET: 1be33b7da257ee02d36a5d690496d9f3021dcc8555b05702555fbc90e1ecbf33b03c908bb633630b80507efba23ba018bba4a0e3328da48aad3561c5f11352f9
      ACCESS_TOKEN_EXPIRATION: 10Min
      REFRESH_TOKEN_SECRET: e839582f1f279d067f899565d4626ec243ba323ea138c4e283fe5bebb828b9d3e9d87a6b8b3cadab2648bb0e846a1117cf9b9f0b34ff26e42bb5474dd7f714b8
      REFRESH_TOKEN_EXPIRATION: 24H
      KAFKA_BROKERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      KAFKAJS_NO_PARTITIONER_WARNING: 1
    restart: unless-stopped
    volumes:
      - ./users:/app
    networks:
      - casino

  kafka-0:
    image: docker.io/bitnami/kafka:4.0
    expose:
      - "9092"
      - "9093"
    environment:
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-0:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      KAFKA_CFG_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
    volumes:
      - kafka-0-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-0:9092 --list"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - casino

  kafka-1:
    image: docker.io/bitnami/kafka:4.0
    expose:
      - "9092"
      - "9093" 
    environment:
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-1:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      KAFKA_CFG_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
    volumes:
      - kafka-1-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-1:9092 --list"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - casino

  kafka-2:
    image: docker.io/bitnami/kafka:4.0
    expose:
      - "9092"
      - "9093"
    environment:
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_PROCESS_ROLES: "controller,broker"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuv"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka-2:9092"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_NUM_PARTITIONS: 3
      KAFKA_CFG_GROUP_MIN_SESSION_TIMEOUT_MS: 6000
      KAFKA_CFG_GROUP_MAX_SESSION_TIMEOUT_MS: 300000
    volumes:
      - kafka-2-data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server kafka-2:9092 --list"]
      start_period: 15s
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - casino

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKERCONNECT: kafka-0:9092
    depends_on:
      kafka-0:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - casino

  promotions-postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: promotions-service
    healthcheck:
      test: ["CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'"]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5434:5432"
    volumes:
      - promotions-data:/var/lib/postgresql/data
    networks:
      - casino

  promotions-init:
    build: ./promotions
    command: ["npm", "run", "migration:run"]
    environment:
      DB_HOST: promotions-postgres
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: promotions-service
    depends_on:
      promotions-postgres: 
        condition: service_healthy
    networks:
      - casino

  promotions:
    build: ./promotions
    depends_on:
      promotions-init:
        condition: service_completed_successfully
      promotions-postgres: 
        condition: service_healthy
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    deploy:
      replicas: 3
    environment:
      PORT: 3001
      GRPC_PORT: 50051
      GRPC_HOST: users
      NODE_ENV: development
      DB_HOST: promotions-postgres
      DB_PORT: 5432
      DB_USER: user
      DB_PASSWORD: password
      DB_NAME: promotions-service
      ACCESS_TOKEN_SECRET: 1be33b7da257ee02d36a5d690496d9f3021dcc8555b05702555fbc90e1ecbf33b03c908bb633630b80507efba23ba018bba4a0e3328da48aad3561c5f11352f9
      KAFKA_BROKERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      KAFKAJS_NO_PARTITIONER_WARNING: 1
      KAFKA_CONSUMER_SESSION_TIMEOUT: 30000
      KAFKA_CONSUMER_HEARTBEAT_INTERVAL: 3000
      KAFKA_CONSUMER_REBALANCE_TIMEOUT: 60000
    restart: unless-stopped
    volumes:
      - ./promotions:/app
    networks:
      - casino


  mongo-master:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
    environment: 
      - MONGO_INITDB_DATABASE=notifications
      - MONGO_INITDB_REPLICA_SET=rs0 
    command: ["mongod", "--replSet", "rs0"]
    networks:
      - casino

  mongo-slave:
    image: mongo:latest
    environment:
      - MONGO_INITDB_DATABASE=notifications
      - MONGO_INITDB_REPLICA_SET=rs0
    command: ["mongod", "--replSet", "rs0"]
    networks:
      - casino

  notifications:
    build: ./notifications
    depends_on:
      mongo-master:
        condition: service_started 
      mongo-slave:
        condition: service_started 
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    deploy:
      replicas: 3
    environment:
      PORT: 3002
      NODE_ENV: development
      ACCESS_TOKEN_SECRET: 1be33b7da257ee02d36a5d690496d9f3021dcc8555b05702555fbc90e1ecbf33b03c908bb633630b80507efba23ba018bba4a0e3328da48aad3561c5f11352f9
      KAFKA_BROKERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      KAFKAJS_NO_PARTITIONER_WARNING: 1
      MONGO_URI: mongodb://mongo-master:27017,mongo-slave:27017/notifications?replicaSet=rs0
      MONGO_DATABASE: notifications
    restart: unless-stopped
    volumes:
      - ./notifications:/app
    networks:
      - casino  

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - users
      - promotions
      - notifications
    networks:
      - casino


volumes:
  kafka-0-data:
  kafka-1-data:
  kafka-2-data:
  users-data:
  promotions-data:
  mongo-data:


networks:
  casino: